- name: Get HA cluster information
  sns_command:
    appliance: "{{ appliance }}"
    command: HA CLUSTER LIST
  register: hacluster
  changed_when: False

- name: Get active firewall serial
  sns_getconf:
    result: "{{ sysprop.result }}"
    section: Result
    token: SerialNumber
  register: serial_active
  changed_when: False

- name: Get passive serial
  set_fact:
    serial_passive: "{{ item }}"
  when: "item != serial_active.value"
  with_items: "{{ hacluster.data.HA }}"
  changed_when: False

- name: Copy current version to backup partition (passive)
  sns_command:
    appliance: "{{ appliance }}"
    script: |
      SYSTEM CLONE type=dump fwserial=passive
    force_modify: "{{ hostvars[inventory_hostname].force_modify | default(false) }}"
  when: system_clone == True

- name: Update passive firewall
  sns_command:
    appliance: "{{ appliance }}"
    script: |
      SYSTEM UPDATE UPLOAD fwserial=all < {{ download_path }}/fwupd-{{ version }}-SNS-{{ arch }}-{{ model }}.maj
      SYSTEM UPDATE ACTIVATE fwserial=passive
    force_modify: "{{ hostvars[inventory_hostname].force_modify | default(false) }}"

- pause:
    minutes: 1

- name: Wait for passive firewall update
  sns_command:
    appliance: "{{ appliance }}"
    command: HA INFO
  register: result
  until: result.data[serial_passive][0]['Reply'] == '1'
  retries: 20
  delay: 30
  changed_when: False

- name: Copy current version to backup partition (active)
  sns_command:
    appliance: "{{ appliance }}"
    script: |
      SYSTEM CLONE type=dump fwserial=active
    force_modify: "{{ hostvars[inventory_hostname].force_modify | default(false) }}"
  when: system_clone == True

- name: Update active firewall and swap
  sns_command:
    appliance: "{{ appliance }}"
    command: SYSTEM UPDATE ACTIVATE fwserial=active
    force_modify: "{{ hostvars[inventory_hostname].force_modify | default(false) }}"
    expect_disconnect: True

- pause:
    minutes: 1

- name: Wait for firewall update
  sns_command:
    appliance: "{{ appliance }}"
    command: HA INFO
  register: result
  until: result.data[serial_active.value][0]['Reply'] == '1'
  retries: 20
  delay: 30
  changed_when: False
