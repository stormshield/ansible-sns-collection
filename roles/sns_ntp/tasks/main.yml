---
- name: Get current ntp configuration (servers)
  sns_command:
    appliance: "{{ hostvars[inventory_hostname].appliance }}"
    command: CONFIG NTP SERVER LIST
  register: ntp_old_config
  changed_when: False

- name: Get current ntp configuration (keys)
  sns_command:
    appliance: "{{ hostvars[inventory_hostname].appliance }}"
    command: CONFIG NTP KEY LIST
  register: ntp_old_key_list
  changed_when: False

- name: Extract current ntp servers
  sns_getconf:
    result: "{{ ntp_old_key_list.result }}"
    section: Result
  register: ntp_old_keys
  changed_when: False

- name: Extract current ntp servers
  sns_getconf:
    result: "{{ ntp_old_config.result }}"
    section: Result
  register: ntp_old_servers
  changed_when: False

- name: Execute ntp configuration script
  sns_command:
    appliance: "{{ hostvars[inventory_hostname].appliance }}"
    script: "{{ lookup('template', 'sns-ntp.j2') }}"
    force_modify: "{{ hostvars[inventory_hostname].force_modify | default(false) }}"
  register: script_result

- block:
  - name: Reboot the appliance
    sns_command:
      appliance: "{{ hostvars[inventory_hostname].appliance }}"
      command: SYSTEM REBOOT
      force_modify: true
      expect_disconnect: true
  - pause:
      seconds: 30

  - name: Wait for reboot
    sns_command:
      appliance: "{{ hostvars[inventory_hostname].appliance }}"
      command: SYSTEM PROPERTY
    ignore_errors: yes
    register: result
    until: "'ret' in result and result.ret == 100"
    retries: 20
    delay: 30
    changed_when: False

  when:
    - reboot_if_needed
    - script_result.need_reboot
